#!/usr/bin/awk -f

function readlink( \
  path, \
  _cmd, _dir \
) {
  _cmd = "readlink -f " path
  _cmd | getline _dir
  close(_cmd)

  return _dir
}

function escape_ml(str) {
  gsub(/&/, "\\&amp;", str)
  gsub(/</, "\\&lt;", str)
  gsub(/>/, "\\&gt;", str)
  gsub(/"/, "\\&quot;", str)
  gsub(/'/, "\\&apos;", str)

  return str
}

function trim_last_char(str) {
  return substr(str, 1, length(str) - 1)
}

function indent_lines( \
  original_lines, indent, \
  _indented_lines, _lines_arr, _preformatted_boundary_match, _i \
) {
  split(original_lines, _lines_arr, "\n")

  for (_i in _lines_arr) {
    match(_lines_arr[_i], /(<pre>)|<\/pre>|(<pre( .*))/, _preformatted_boundary_match)
    _indented_lines = _indented_lines ((_i == 1 || _preformatted_boundary_match[0]) ? "" : indent) _lines_arr[_i] "\n"
  }

  return trim_last_char(_indented_lines)
}

function populate_global_values_index( \
  paths_values_dirs_arr, \
  _i  \
) {
  for (_i in paths_values_dirs_arr) {
    if (! paths_values_dirs_arr[_i] in _global_values_index) {
      _cmd_find = "find " paths_values_dirs_arr[_i] "/_* -maxdepth 0 -type f"

      while ((_cmd_find | getline _find_path_result) > 0) {
        match(_find_path_result, /[^/]*$/, _basename_match)

        _global_values_index[paths_values_dirs_arr[_i]][_basename_match[0]]["path"] = _find_path_result

        match(_basename_match[0], /^_[a-z]*_/, _prefix_match)

        if (_prefix_match[0]) {
          _global_values_index[paths_values_dirs_arr[_i]][_basename_match[0]]["type"] = _prefix_match[0]
          delete _prefix_match
        }

        _global_values_index[paths_values_dirs_arr[_i]][_basename_match[0]]["value"] = read_value_file(_global_values_index[paths_values_dirs_arr[_i]][_basename_match[0]])

        delete _basename_match
      }

      close(_cmd_find)
    }
  }
}

function document_populate_values_index( \
  document, \
  _value_name, _i, _prop \
) {
  for (_i in document["paths_values_dir"]) for (_value_name in _global_values_index[document["paths_values_dir"][_i]]) {
    for (_prop in _global_values_index[document["paths_values_dir"][_i]][_value_name]) {
      document["values_index"][_value_name][_prop] = _global_values_index[document["paths_values_dir"][_i]][_value_name][_prop]
    }
  }
}

function find_values_placeholders_in_str( \
  str, values_index, result, \
  _value_index, _count \
) {
  for (_value_index in values_index) {
    _value_count = match(str, "<!-- " _value_index " -->")
    if (_value_count) result[_value_index] = 1
    _count += _value_count
  }

  return _count
}

function read_value_file( \
  value, \
  _value_lines, _line \
) {
  while((getline _line < (value["path"])) > 0) {
    switch (value["type"]) {
      case "_inline_":
        _value_lines = _value_lines _line
        continue
      case "_pre_":
        _value_lines = _value_lines escape_ml(_line) "\n"
        continue
      case "_block_":
        _value_lines = _value_lines _line "\n"
        continue
    }
  }
  close(value["path"])

  if (value["type"] == "_pre_") _value_lines = trim_last_char(_value_lines)

  return _value_lines
}

function sub_values_placeholders_in_str( \
  found_values, values_index, fragment, \
  _fragment_out, _indent, _indent_match, _value_placeholder, _value, _i, _index_placeholder_start, _index_placeholder_end, _before_placeholder, _after_placeholder, _replacement \
) {
  for (_value in found_values) {
    split(fragment, _fragment_out_arr, "\n")
    _fragment_out = ""
    _value_placeholder = "<!-- " _value " -->"

    for (_i in _fragment_out_arr) {
      if (match(_fragment_out_arr[_i], _value_placeholder)) {
        if (values_index[_value]["type"] == "_block_") {
          _indent = match(_fragment_out_arr[_i], /^\s+/, _indent_match) ? _indent_match[0] : ""
          _replacement = indent_lines(trim_last_char(values_index[_value]["value"]), _indent)
        } else _replacement = values_index[_value]["value"]

        _index_placeholder_start = index(_fragment_out_arr[_i], _value_placeholder)
        _index_placeholder_end = _index_placeholder_start + length(_value_placeholder)
        _before_placeholder = substr(_fragment_out_arr[_i], 1, _index_placeholder_start - 1)
        _after_placeholder = substr(_fragment_out_arr[_i], _index_placeholder_end)

        _fragment_out_arr[_i] = _before_placeholder _replacement _after_placeholder
      }

      _fragment_out = _fragment_out _fragment_out_arr[_i] "\n"
    }

    _fragment_out = trim_last_char(_fragment_out)
  }

  return _fragment_out
}

function document_sub_placeholders_values( \
  document, \
  _fragment_out, _found_values, _i, _max_iterations \
) {
  _fragment_out = document["values_index"]["_inline_build_entrypoint"]["value"]

  _max_iterations = 100
  while (find_values_placeholders_in_str(_fragment_out, document["values_index"], _found_values) > 0) {
    if (_i > _max_iterations) {
      print "Error: Possible circular template value dependency (" _max_iterations " iterations exceeded)"
      exit 1
    }

    _fragment_out = sub_values_placeholders_in_str(_found_values, document["values_index"], _fragment_out)
    delete _found_values
    _i++
  }

  gsub(/\s+<!-- _block_.*-->/, "", _fragment_out)

  document["fragment"] = _fragment_out
}

function document_write( \
  document, \
  _path_dir_document_out, _path_file_document_out \
) {
  _path_dir_document_out = _dir_dist "/" document["values_index"]["_inline_path"]["value"]
  _path_file_document_out = _path_dir_document_out "/" document["values_index"]["_inline_filename"]["value"]

  if (! system("mkdir -p " _path_dir_document_out)) {
    print document["fragment"] >> _path_file_document_out
    close(_path_file_document_out)
  }
}

function document_copy_static( \
  document, \
  _path_dir_src_static, _path_dir_dist_static \
) {
  _path_dir_src_static = document["path_src"] "/static"
  _path_dir_dist_static = _dir_dist "/" document["values_index"]["_inline_path"]["value"] "/"

  if (! system("test -d " _path_dir_src_static)) system("cp -r " _path_dir_src_static "/* " _path_dir_dist_static)
}

BEGIN {
  if (! ARGV[1] || ! ARGV[2]) {
    print "Error: Must provide paths of site and dist directories"
    exit 1
  }

  _dir_site = readlink(ARGV[1])
  _dir_dist = readlink(ARGV[2])

  print "Root directory " _dir_site

  _global_values_index[0] = ""
  _children_sitemap = ""

  system("rm -rf " _dir_dist " && mkdir -p " _dir_dist "/tmp/sitemap")

  print "Indexing generic document paths"

  _cmd_find_documents = "find " _dir_site "/documents/* -maxdepth 0 -type d"
  _i = 0
  while ((_cmd_find_documents | getline _path_dir_src_document ) > 0) {
    print "Found " _path_dir_src_document
    _paths_src_generic_documents_arr[_i] = _path_dir_src_document
    _i++
  }
  close(_cmd_find_documents)

  print "Finished indexing generic document paths"

  print "Indexing generic document values"

  for (_i in _paths_src_generic_documents_arr) {
    _generic_documents[_i]["path_src"] = _paths_src_generic_documents_arr[_i]
    _generic_documents[_i]["paths_values_dir"][1] = _dir_site
    _generic_documents[_i]["paths_values_dir"][2] = _paths_src_generic_documents_arr[_i]
    populate_global_values_index(_generic_documents[_i]["paths_values_dir"])

    document_populate_values_index(_generic_documents[_i])
  }

  print "Finished indexing generic document values"

  print "Building generic documents"

  for (_i in _generic_documents) {
    document_sub_placeholders_values(_generic_documents[_i])
    document_write(_generic_documents[_i])
    document_copy_static(_generic_documents[_i])
  }

  print "Built generic documents"

  print "Building sitemap entries"

  for (_i in _generic_documents) {
    if (match(_generic_documents[_i]["values_index"]["_inline_filename"]["value"], /(403\.html$|404\.html$|manifest\.webmanifest$|robots\.txt$)/)) {
      print "Skipped building sitemap entry" _generic_documents[_i]["path_src"]
      continue
    }

    print "Building sitemap entry " _generic_documents[_i]["path_src"]

    _sitemap_entry["paths_values_dir"][1] = _dir_site
    _sitemap_entry["paths_values_dir"][2] = _generic_documents[_i]["path_src"]
    _sitemap_entry["paths_values_dir"][3] = _dir_site "/sitemap/url"
    populate_global_values_index(_sitemap_entry["paths_values_dir"])

    document_populate_values_index(_sitemap_entry)
    document_sub_placeholders_values(_sitemap_entry)
    _children_sitemap = _children_sitemap _sitemap_entry["fragment"]

    print "Built sitemap entry " _generic_documents[_i]["path_src"]
  }

  print "Finished building sitemap entries"

  print "Building sitemap"

  _path_file_children_sitemap = _dir_dist "/tmp/sitemap/_block_sitemap_children.xml"
  print _children_sitemap >> _path_file_children_sitemap 
  close(_path_file_children_sitemap)

  _sitemap["paths_values_dir"][1] = _dir_site
  _sitemap["paths_values_dir"][2] = _dir_site "/sitemap/document"
  _sitemap["paths_values_dir"][3] = _dir_dist "/tmp/sitemap"
  populate_global_values_index(_sitemap["paths_values_dir"])

  document_populate_values_index(_sitemap)
  document_sub_placeholders_values(_sitemap)
  document_write(_sitemap)

  print "Built sitemap"

  system("rm -rf " _dir_dist "/tmp")

  print "Finished"

  exit
}
